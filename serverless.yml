service: fam-budget
# app and org for use with dashboard.serverless.com
app: fam-budget
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 512
plugins:
  - serverless-offline
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
environment:
   stage: ${self:provider.stage}
   region: ${self:provider.stage}

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  signup:
    handler: src/api/auth/signup.signUp
    events:
     - http:
         path: /auth/signup
         method: post
         cors: true
  createTransaction:
    handler: src/api/transaction/createTransaction.createTransaction
    events:
      - http:
          path: /transaction/createTransaction
          method: post
          cors: true
  getTransaction:
    handler: src/api/transaction/getTransaction.getTransaction
    events:
      - http:
          path: /transaction/getTransaction
          method: get
          cors: true
  monthly_overview:
    handler: src/api/reports/expenseTracking.expenseTracking
    events:
      - http:
          path: /reports/getMonthly
          method: get
          cors: true
  get_recent_transactions:
    handler: src/api/reports/getRecentTransaction.getRecentTransaction
    events:
      - http:
          path: /reports/getRecentTransactions
          method: get
          cors: true
  get_balance:
    handler: src/api/reports/getBalance.getBalance
    events:
      - http:
          path: /reports/getBalance
          method: get
          cors: true
  create_account:
    handler: src/api/account/account.create.createAccount
    events:         
     - http:
         path: /account/create
         method: post
         cors: true         
  modify_kyc:
    handler: src/api/accountHolder/updateKyc.updateKyc
    events:         
     - http:
         path: /accountHolder/updateKyc
         method: post
         cors: true 
  login:
    handler: src/api/auth/login.login
    events:         
     - http:
         path: /auth/login
         method: post
         cors: true 
  forgot_password:
    handler: src/api/auth/forgotPassword.forgotPassword
    events:         
     - http:
         path: /auth/forgotPassword
         method: post
         cors: true 
  confirm_password:
    handler: src/api/auth/confirmPassword.confirmPassword
    events:         
     - http:
         path: /auth/confirmPassword
         method: post
         cors: true 
  reset_temporary_password:
    handler: src/api/auth/resetTemporaryPass.resetTemporaryPassword
    events:         
     - http:
         path: /auth/resetTemporaryPassword
         method: post
         cors: true
  create_secondary_account:
    handler: src/api/secondaryaccount/createSecondaryUser.createSecondaryUser
    events:         
     - http:
         path: /secondaryaccount/create
         method: post
         cors: true                    
  delete_secondary_account:
    handler: src/api/secondaryaccount/deleteSecondaryUser.deleteSecondaryUser
    events:         
     - http:
         path: /secondaryaccount/delete
         method: delete
         cors: true                    
  get_secondary_account:
    handler: src/api/secondaryaccount/getAllSecondaryUsers.getAllSecondaryUsers
    events:         
     - http:
         path: /secondaryaccount/get/all
         method: post
         cors: true                    
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
